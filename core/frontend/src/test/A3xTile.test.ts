/*---------------------------------------------------------------------------------------------
* Copyright (c) Bentley Systems, Incorporated. All rights reserved.
* See LICENSE.md in the project root for license terms and full copyright notice.
*--------------------------------------------------------------------------------------------*/
import { Point3d, Range3d } from "@bentley/geometry-core";
import { TileFormat, TileProps } from "@bentley/imodeljs-common";
import { expect } from "chai";
import { A3xTile } from "../tile/A3xTile";
import { A3xTileIO } from "../tile/A3xTileIO";

function expectChunkHeader(hdr: A3xTileIO.Chunk, expectedType: A3xTileIO.ChunkType, expectedLength: number): void {
  expect(hdr.type).to.equal(expectedType);
  expect(hdr.length).to.equal(expectedLength);
}

describe("A3x tiles", () => {
  it("should decode variable-size unsigned integers", () => {
    const encode = (value: number, output: number[]) => {
      while (((value & 0xffffff80) >>> 0) !== 0) {
        output.push((value & 0x7f) | 0x80);
        value >>>= 7;
      }

      output.push(value & 0x7f);
    };

    const inputs = [
      0, 1, 50, 64, 127, 128, 129, 254, 255, 256, 511, 512, 513, 0x7ffe, 0x7fff, 0x8000, 0x8001,
      0x7ffffffe, 0x7fffffff, 0x80000000, 0x80000001, 0xfffffffe, 0xffffffff, 0x12345678, 0x87654321,
    ];

    const bytes: number[] = [];
    for (const input of inputs)
      encode(input, bytes);

    const reader = new A3xTileIO.StreamReader(new Uint8Array(bytes));
    for (const input of inputs)
      expect(reader.nextVarInt).to.equal(input);

    expect(reader.curPos).to.equal(bytes.length);
  });

  const rootTile = new Uint8Array([
    0x41, 0x33, 0x58, 0x00, 0x01, 0x00, 0x07, 0x00, 0x84, 0x5E, 0x29, 0x27, 0x6B, 0x01, 0x00, 0x00,
    0x84, 0x5E, 0x29, 0x27, 0x6B, 0x01, 0x00, 0x00, 0x03, 0x01, 0x20, 0x42, 0x65, 0x6E, 0x74, 0x6C,
    0x65, 0x79, 0x20, 0x54, 0x65, 0x72, 0x72, 0x61, 0x69, 0x6E, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
    0x20, 0x45, 0x6D, 0x70, 0x74, 0x79, 0x20, 0x44, 0x61, 0x74, 0x61, 0x08, 0x02, 0xC5, 0x00, 0x00,
    0x00, 0xC1, 0x00, 0x00, 0x00, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0xB4, 0x00, 0x00,
    0x00, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x3F, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xF0, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x3F, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xF0, 0x3F, 0x00, 0x00, 0x00, 0x50, 0xAB, 0x1D, 0x25, 0x41, 0x00, 0x00, 0x00,
    0x30, 0x79, 0x4B, 0x52, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x60, 0x93, 0x9A, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x99, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x02, 0x00,
    0x00, 0x00, 0x02, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x09, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x0A, 0x00,
    0x01, 0x02, 0x00, 0x00, 0x00, 0x0B, 0x00,
  ]);

  it("should read header for root tile", () => {
    const stream = new A3xTileIO.StreamReader(rootTile);
    const header = new A3xTileIO.Header(stream);
    expect(header.isValid).to.be.true;

    expect(header.format).to.equal(TileFormat.A3x);
    expect(header.version).to.equal(7);
    expect(header.byteOrder).to.equal(A3xTileIO.ByteOrder.LittleEndian);
    expect(header.options.length).to.equal(0);
    expect(header.upAxis).to.equal(A3xTileIO.UpAxis.Z);
    expect(header.contributors.length).to.equal(1);
    expect(header.contributors[0]).to.equal("Bentley TerrainServer Empty Data");
    expect(header.chunks.length).to.equal(8);

    expect(stream.curPos).to.equal(rootTile.length);
  });

  it("should read contents of root tile", () => {
    const reader = A3xTileIO.Reader.create(rootTile)!;
    expect(reader).not.to.be.undefined;
    expect(reader.header.isValid).to.be.true;

    // ###TODO Not sure exactly what this means...it's basically an empty tile with a single InstanceGroup with no Instances
    expect(reader.buffers.size).to.equal(0);
    expect(reader.instances.size).to.equal(0);
    expect(reader.materials.size).to.equal(0);
    expect(reader.meshes.size).to.equal(0);
    expect(reader.nodes.size).to.equal(0);
    expect(reader.strings.size).to.equal(0);
    expect(reader.textures.size).to.equal(0);

    expect(reader.model.attributes.length).to.equal(0);
    expect(reader.model.sceneGraph.length).to.equal(0);

    expect(reader.model.instances.length).to.equal(1);
    const instance = reader.model.instances[0] as A3xTileIO.BatchInstanceGroup;
    expect(instance.type).to.equal(A3xTileIO.InstanceGroupType.Batch);
    expect(instance.transform.origin.isAlmostZero).to.be.true;
    expect(instance.transform.matrix.isIdentity).to.be.true;
    expect(Math.floor(instance.aabb.low.x)).to.equal(690224);
    expect(Math.floor(instance.aabb.low.y)).to.equal(4794265);
    expect(instance.aabb.low.z).to.equal(0);
    expect(Math.floor(instance.aabb.high.x)).to.equal(693626);
    expect(Math.floor(instance.aabb.high.y)).to.equal(4797488);
    expect(instance.aabb.high.z).to.equal(0);
  });

  // Tile 10/768/129 of marsielles terrain
  // "camel-case" doesn't work for separating digits stupid linter.
  const marsielles_10_768_129 = new Uint8Array([ // tslint:disable-line
    0x41, 0x33, 0x58, 0x00, 0x01, 0x00, 0x07, 0x00, 0x84, 0xEE, 0xFA, 0xE6, 0x69, 0x01, 0x00, 0x00,
    0x3C, 0x69, 0x29, 0x27, 0x6B, 0x01, 0x00, 0x00, 0x03, 0x16, 0x16, 0x41, 0x67, 0x65, 0x6E, 0x63,
    0x79, 0x39, 0x20, 0x43, 0x4F, 0x4C, 0x4C, 0x41, 0x44, 0x41, 0x20, 0x74, 0x6F, 0x20, 0x41, 0x33,
    0x58, 0x0D, 0x41, 0x67, 0x65, 0x6E, 0x63, 0x79, 0x39, 0x20, 0x42, 0x61, 0x74, 0x63, 0x68, 0x11,
    0x41, 0x67, 0x65, 0x6E, 0x63, 0x79, 0x39, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x66, 0x6F, 0x72,
    0x6D, 0x11, 0x41, 0x67, 0x65, 0x6E, 0x63, 0x79, 0x39, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x66,
    0x6F, 0x72, 0x6D, 0x0D, 0x41, 0x67, 0x65, 0x6E, 0x63, 0x79, 0x39, 0x20, 0x42, 0x61, 0x74, 0x63,
    0x68, 0x16, 0x41, 0x67, 0x65, 0x6E, 0x63, 0x79, 0x39, 0x20, 0x51, 0x75, 0x61, 0x64, 0x72, 0x61,
    0x6E, 0x74, 0x52, 0x65, 0x6D, 0x6F, 0x76, 0x65, 0x18, 0x41, 0x67, 0x65, 0x6E, 0x63, 0x79, 0x39,
    0x20, 0x53, 0x63, 0x65, 0x6E, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x6D, 0x6F, 0x76,
    0x65, 0x15, 0x41, 0x67, 0x65, 0x6E, 0x63, 0x79, 0x39, 0x20, 0x4E, 0x6F, 0x72, 0x6D, 0x61, 0x6C,
    0x73, 0x52, 0x65, 0x6D, 0x6F, 0x76, 0x65, 0x0D, 0x41, 0x67, 0x65, 0x6E, 0x63, 0x79, 0x39, 0x20,
    0x42, 0x61, 0x74, 0x63, 0x68, 0x0C, 0x41, 0x67, 0x65, 0x6E, 0x63, 0x79, 0x39, 0x20, 0x43, 0x6C,
    0x69, 0x70, 0x0D, 0x41, 0x67, 0x65, 0x6E, 0x63, 0x79, 0x39, 0x20, 0x42, 0x61, 0x74, 0x63, 0x68,
    0x17, 0x41, 0x67, 0x65, 0x6E, 0x63, 0x79, 0x39, 0x20, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
    0x55, 0x6E, 0x70, 0x61, 0x63, 0x6B, 0x65, 0x72, 0x19, 0x41, 0x67, 0x65, 0x6E, 0x63, 0x79, 0x39,
    0x20, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6F, 0x6E, 0x76, 0x65, 0x72, 0x74,
    0x65, 0x72, 0x0D, 0x41, 0x67, 0x65, 0x6E, 0x63, 0x79, 0x39, 0x20, 0x42, 0x61, 0x74, 0x63, 0x68,
    0x15, 0x41, 0x67, 0x65, 0x6E, 0x63, 0x79, 0x39, 0x20, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
    0x50, 0x61, 0x63, 0x6B, 0x65, 0x72, 0x0D, 0x41, 0x67, 0x65, 0x6E, 0x63, 0x79, 0x39, 0x20, 0x42,
    0x61, 0x74, 0x63, 0x68, 0x18, 0x41, 0x67, 0x65, 0x6E, 0x63, 0x79, 0x39, 0x20, 0x54, 0x65, 0x78,
    0x74, 0x75, 0x72, 0x65, 0x43, 0x6F, 0x6E, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x13, 0x41, 0x67,
    0x65, 0x6E, 0x63, 0x79, 0x39, 0x20, 0x4D, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6C, 0x53, 0x65,
    0x74, 0x18, 0x41, 0x67, 0x65, 0x6E, 0x63, 0x79, 0x39, 0x20, 0x53, 0x63, 0x65, 0x6E, 0x65, 0x67,
    0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x6D, 0x6F, 0x76, 0x65, 0x0D, 0x41, 0x67, 0x65, 0x6E, 0x63,
    0x79, 0x39, 0x20, 0x42, 0x61, 0x74, 0x63, 0x68, 0x10, 0x41, 0x67, 0x65, 0x6E, 0x63, 0x79, 0x39,
    0x20, 0x51, 0x75, 0x61, 0x64, 0x72, 0x61, 0x6E, 0x74, 0x11, 0x41, 0x67, 0x65, 0x6E, 0x63, 0x79,
    0x39, 0x20, 0x53, 0x6B, 0x69, 0x72, 0x74, 0x73, 0x41, 0x64, 0x64, 0x08, 0x02, 0xF8, 0x00, 0x00,
    0x00, 0xF4, 0x00, 0x00, 0x00, 0x02, 0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x02, 0xB5, 0x00,
    0x00, 0x00, 0x01, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x3F, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x3F, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE2, 0x58, 0x5B, 0x9E, 0x74, 0x0D, 0x25, 0x41, 0x9F,
    0x0D, 0x16, 0x7B, 0x9A, 0x49, 0x52, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x3F, 0xE2, 0x58, 0xAB, 0x7F, 0x60, 0x11, 0x25, 0x41, 0x9F,
    0x0D, 0x9B, 0x90, 0x27, 0x4A, 0x52, 0x41, 0x00, 0x00, 0x00, 0x20, 0xC4, 0x4C, 0xF0, 0x3F, 0x00,
    0x00, 0x00, 0x00, 0xAD, 0x71, 0x57, 0x40, 0x00, 0x00, 0x00, 0x00, 0x48, 0x61, 0x3F, 0x40, 0x00,
    0x00, 0x00, 0xA0, 0xF0, 0x60, 0xFC, 0x3F, 0x05, 0x0A, 0x07, 0x03, 0x05, 0x35, 0xDA, 0xC3, 0x8B,
    0x6C, 0x1D, 0x25, 0x41, 0x05, 0x78, 0xFB, 0xA2, 0x78, 0x77, 0x4B, 0x52, 0x41, 0x05, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x02, 0x0C, 0x0D, 0x02, 0x0E, 0x0F, 0x02, 0x10, 0x11,
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x3F, 0x01, 0x0B, 0x00, 0x00, 0x00, 0x01, 0x01,
    0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x09, 0x01, 0x07, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x02, 0x01,
    0x02, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0A, 0x12, 0x00, 0x00, 0x07,
    0x04, 0x03, 0x03, 0x10, 0x00, 0x00, 0x00, 0x80, 0x20, 0x68, 0x42, 0x85, 0x29, 0xAB, 0x89, 0x2A,
    0x2A, 0xC9, 0x4A, 0xE6, 0x31, 0x9E, 0x3F, 0xB6, 0xFA, 0x88, 0x42, 0xC5, 0x29, 0x6B, 0xD2, 0xF2,
    0xF8, 0x0A, 0x53, 0xE6, 0x29, 0xFF, 0x72, 0xD0, 0xBA, 0x2A, 0x4B, 0x27, 0x2A, 0xCB, 0xC9, 0xCF,
    0x64, 0x0B, 0x4B, 0xE6, 0x29, 0x5F, 0xE3, 0xCB, 0x5F, 0xCA, 0x52, 0x03, 0x19, 0x5F, 0xFB, 0x23,
    0xBA, 0x28, 0x3A, 0xC4, 0x18, 0x63, 0xCA, 0xA8, 0xCE, 0x29, 0x4A, 0x04, 0x21, 0x09, 0xAF, 0x3E,
    0xFA, 0x4A, 0x4A, 0x25, 0x21, 0xF0, 0xEF, 0xFA, 0xAD, 0xCC, 0x5A, 0x25, 0x29, 0x55, 0xFD, 0xEB,
    0x43, 0x08, 0x42, 0x25, 0x21, 0xCC, 0xC8, 0xC2, 0x89, 0x29, 0x42, 0xE4, 0x20, 0xDD, 0xF0, 0x5F,
    0x8D, 0x4A, 0x4A, 0x25, 0x29, 0xEA, 0xBE, 0xAD, 0x05, 0xAC, 0x5A, 0xE5, 0x20, 0xF3, 0xDB, 0xDB,
    0xF2, 0x8C, 0x5A, 0x87, 0x31, 0xD5, 0xD6, 0xB8, 0x96, 0x4A, 0x4A, 0xE4, 0x18, 0xFA, 0x5F, 0xA0,
    0xA2, 0x8B, 0x52, 0x46, 0x29, 0xEF, 0xEE, 0xEC, 0x6C, 0xED, 0x62, 0x05, 0x21, 0xA9, 0xE9, 0xC2,
    0xF9, 0x0D, 0x63, 0xA8, 0x39, 0x56, 0x58, 0xC0, 0x61, 0xAF, 0x7B, 0x86, 0x31, 0xBD, 0x9D, 0xDE,
    0xEC, 0xAF, 0x6B, 0x46, 0x21, 0x2A, 0xA2, 0xAD, 0x3D, 0x8E, 0x63, 0x29, 0x32, 0xA7, 0xBF, 0xDE,
    0x7C, 0x30, 0x74, 0x8A, 0x3A, 0x89, 0xBF, 0x8A, 0xE1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x3A, 0xA2, 0x00, 0x28, 0x35, 0x35,
    0xFF, 0xA9, 0x42, 0xC6, 0x29, 0xEC, 0x86, 0xE8, 0x0B, 0x89, 0x42, 0x06, 0x32, 0xE6, 0xEC, 0xAE,
    0xE0, 0x2B, 0x4B, 0x27, 0x32, 0x2F, 0xDF, 0xDA, 0xD5, 0xCA, 0x42, 0x06, 0x2A, 0x3C, 0xAF, 0x0B,
    0xB5, 0xEA, 0x42, 0x06, 0x2A, 0xF0, 0x62, 0x42, 0xEA, 0xC9, 0x42, 0xE6, 0x29, 0x71, 0xC2, 0x8A,
    0x0E, 0xEA, 0x4A, 0x85, 0x19, 0xF9, 0xAA, 0x28, 0xAE, 0x89, 0x42, 0x65, 0x21, 0xA7, 0x7E, 0xE0,
    0x00, 0x8E, 0x6B, 0x24, 0x19, 0xCB, 0xE5, 0xBF, 0xFA, 0x2D, 0x63, 0x66, 0x29, 0x5E, 0xBE, 0x9C,
    0xDE, 0x49, 0x42, 0xA7, 0x29, 0xA1, 0xC4, 0x8C, 0x31, 0x86, 0x31, 0xA3, 0x10, 0xE4, 0x8A, 0x80,
    0x32, 0x8B, 0x5A, 0x05, 0x21, 0x87, 0xFF, 0xD5, 0xB7, 0xAC, 0x62, 0x46, 0x31, 0x9B, 0x2B, 0xD7,
    0xF7, 0x4A, 0x52, 0xE5, 0x20, 0xEB, 0x8A, 0x7F, 0x6B, 0x2E, 0x6B, 0x46, 0x29, 0xDE, 0x9A, 0x1F,
    0x1F, 0x6B, 0x52, 0x67, 0x31, 0xFA, 0x77, 0xEA, 0xB2, 0x0D, 0x63, 0xE5, 0x20, 0xDF, 0xBF, 0x2A,
    0x38, 0xE9, 0x41, 0xE5, 0x20, 0xCF, 0xFF, 0x9E, 0x90, 0xAC, 0x5A, 0xA8, 0x39, 0xA8, 0xE2, 0xC2,
    0xA9, 0x2D, 0x63, 0x46, 0x29, 0x39, 0x33, 0x3B, 0xAA, 0x4E, 0x63, 0x87, 0x29, 0x8A, 0x36, 0x36,
    0xAF, 0x10, 0x6C, 0xAB, 0x42, 0xAD, 0x19, 0x1D, 0xDD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8A, 0x4A, 0xE3, 0x10, 0x57, 0xFF, 0xFF,
    0xE0, 0x07, 0x32, 0xC2, 0x08, 0x02, 0xDE, 0x56, 0x7E, 0xCA, 0x4A, 0xC3, 0x08, 0x02, 0x0B, 0x29,
    0x29, 0x0A, 0x4B, 0x27, 0x32, 0xBF, 0x30, 0x97, 0xAF, 0x0A, 0x4B, 0x26, 0x2A, 0xB7, 0x28, 0xFE,
    0x7E, 0x4B, 0x53, 0xE6, 0x29, 0x3F, 0x3E, 0xB7, 0x6D, 0x2B, 0x53, 0x06, 0x2A, 0x27, 0x2F, 0xBA,
    0x5A, 0xCA, 0x4A, 0xA5, 0x21, 0x8B, 0x8B, 0xFA, 0xD4, 0x69, 0x42, 0x65, 0x21, 0x28, 0xB8, 0x5A,
    0x50, 0x0C, 0x5B, 0x07, 0x32, 0xFA, 0x2A, 0xB5, 0xFF, 0x6A, 0x42, 0x65, 0x21, 0x8A, 0x28, 0x3E,
    0xA9, 0x6D, 0x63, 0xC3, 0x10, 0xFF, 0xEA, 0xE0, 0xDF, 0xE8, 0x39, 0xE4, 0x18, 0xD9, 0x63, 0xEA,
    0x2E, 0x8A, 0x52, 0x45, 0x29, 0x9F, 0xF9, 0x0F, 0x2C, 0x8B, 0x5A, 0x05, 0x29, 0x8B, 0xAD, 0xF9,
    0xBB, 0xAC, 0x5A, 0x47, 0x31, 0x72, 0x52, 0xBB, 0x97, 0xAC, 0x5A, 0x26, 0x29, 0xD4, 0x74, 0xE8,
    0xAB, 0xED, 0x62, 0x67, 0x31, 0xFD, 0xCD, 0x87, 0x37, 0x6B, 0x52, 0x67, 0x31, 0x3C, 0xEF, 0x6E,
    0x6C, 0xCD, 0x62, 0x47, 0x31, 0xAB, 0x2B, 0x9F, 0xAC, 0x6C, 0x5A, 0xE5, 0x28, 0xAF, 0xF8, 0x2E,
    0x36, 0xAD, 0x62, 0x67, 0x39, 0xFE, 0xB6, 0xB8, 0x78, 0x4B, 0x52, 0x05, 0x21, 0x89, 0xEB, 0xA2,
    0xA2, 0xAF, 0x6B, 0x67, 0x21, 0xFA, 0x26, 0xB6, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0xC5, 0x48, 0x42, 0x5A, 0x5A, 0xA0,
    0x80, 0x6D, 0x6B, 0x44, 0x21, 0x7F, 0x7E, 0x7C, 0x5C, 0xAB, 0x4A, 0xC3, 0x10, 0x25, 0x95, 0x35,
    0x27, 0xCB, 0x4A, 0x08, 0x2A, 0xEE, 0xAF, 0xB6, 0xF4, 0xCA, 0x42, 0x27, 0x2A, 0x25, 0xA8, 0xE0,
    0x82, 0x6C, 0x53, 0x06, 0x2A, 0xF7, 0xFA, 0xFB, 0x2F, 0xD6, 0xA5, 0xC6, 0x21, 0x7F, 0x6F, 0x0D,
    0xB5, 0x4C, 0x53, 0x85, 0x19, 0xD8, 0xBE, 0xAE, 0xAB, 0xCA, 0x42, 0x84, 0x19, 0xB8, 0xF8, 0xDC,
    0xBE, 0x89, 0x42, 0xC6, 0x29, 0x2B, 0xFB, 0x55, 0xEF, 0xAA, 0x4A, 0x85, 0x21, 0xD8, 0xAA, 0xAA,
    0xAA, 0x0B, 0x5B, 0xA6, 0x21, 0xF7, 0x0A, 0xBE, 0xD7, 0xCA, 0x4A, 0x45, 0x21, 0xB9, 0xDA, 0xB2,
    0x02, 0x2C, 0x63, 0x86, 0x29, 0xDD, 0xDD, 0x2B, 0x3F, 0x8A, 0x52, 0xA7, 0x31, 0xFA, 0x63, 0xB0,
    0x3C, 0xCC, 0x5A, 0x25, 0x29, 0xA7, 0x7D, 0x4F, 0x8F, 0xCC, 0x5A, 0x83, 0x10, 0xE2, 0x2F, 0xB7,
    0xAA, 0xED, 0x62, 0x26, 0x29, 0xEA, 0x76, 0xEA, 0x8D, 0x6B, 0x52, 0x05, 0x21, 0x00, 0x0A, 0x0D,
    0xA7, 0x8C, 0x5A, 0x05, 0x29, 0x0E, 0xEF, 0xCF, 0xFD, 0x6B, 0x5A, 0x26, 0x31, 0xD4, 0xFA, 0x7B,
    0xE0, 0xCD, 0x6A, 0x06, 0x31, 0x80, 0xA7, 0xAF, 0x7F, 0x6F, 0x7B, 0x47, 0x31, 0xDB, 0xDB, 0xDB,
    0xB2, 0x8F, 0x6B, 0x87, 0x31, 0x2D, 0xB5, 0xDF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0xD6, 0xB0, 0x9C, 0xAE, 0xA7, 0x0E,
    0xF5, 0xB5, 0xBD, 0xC6, 0x39, 0x5E, 0xFC, 0xE8, 0x78, 0x89, 0x42, 0x03, 0x11, 0xBE, 0xDC, 0xFC,
    0x5E, 0x8A, 0x42, 0xC3, 0x00, 0x08, 0x0A, 0xBF, 0x95, 0xAA, 0x42, 0xE7, 0x29, 0x82, 0x78, 0x58,
    0xAA, 0xEB, 0x4A, 0xC7, 0x21, 0x1B, 0xC3, 0xFB, 0x9E, 0xCB, 0x4A, 0x65, 0x19, 0x9C, 0xE6, 0x4E,
    0xE7, 0x89, 0x3A, 0x44, 0x11, 0x0D, 0x00, 0x28, 0x20, 0x0A, 0x4B, 0x47, 0x32, 0x96, 0x3C, 0xB8,
    0x28, 0xA9, 0x3A, 0x06, 0x2A, 0x0E, 0x26, 0xAE, 0x80, 0x0B, 0x4B, 0x48, 0x32, 0x3E, 0x37, 0x97,
    0xFB, 0xEB, 0x4A, 0xA5, 0x21, 0xAC, 0x2C, 0xAE, 0x5E, 0x8D, 0x63, 0x07, 0x32, 0xFF, 0x5F, 0xEF,
    0x0D, 0xEB, 0x52, 0x86, 0x29, 0x92, 0x22, 0x2F, 0x56, 0xEB, 0x5A, 0x66, 0x29, 0x8B, 0xA8, 0xD4,
    0x6C, 0x4A, 0x4A, 0xC4, 0x18, 0x8B, 0x0A, 0x2C, 0x78, 0xAC, 0x5A, 0x26, 0x29, 0x29, 0x35, 0xFC,
    0x74, 0x8B, 0x5A, 0xC4, 0x18, 0x2F, 0xB0, 0xEB, 0x81, 0x8B, 0x52, 0x26, 0x29, 0xE8, 0x2A, 0xAF,
    0x70, 0xED, 0x5A, 0x05, 0x21, 0x2D, 0xBF, 0xEF, 0xC9, 0xB0, 0x7B, 0x67, 0x31, 0xD7, 0xBF, 0x5D,
    0x73, 0xED, 0x62, 0xE5, 0x28, 0x72, 0x6A, 0xFB, 0x22, 0x4F, 0x73, 0x06, 0x29, 0x20, 0xBE, 0xFF,
    0x77, 0xD1, 0x7B, 0x26, 0x29, 0xF3, 0xE3, 0xAD, 0xD5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB5, 0xBD, 0xAD, 0x73, 0x68, 0x82, 0xA2,
    0x7A, 0xEE, 0x7B, 0xE6, 0x31, 0x5E, 0xC8, 0x68, 0x5F, 0xA7, 0x21, 0xE4, 0x08, 0x8A, 0xC2, 0x42,
    0x70, 0x2D, 0x4B, 0xA3, 0x00, 0x95, 0xBD, 0x3D, 0x35, 0x6E, 0x53, 0x87, 0x19, 0x2E, 0xB7, 0xEA,
    0x70, 0xED, 0x4A, 0x26, 0x11, 0x02, 0x7F, 0xCA, 0xFA, 0x0D, 0x4B, 0xE5, 0x08, 0xBB, 0xBD, 0x22,
    0xF2, 0x0B, 0x4B, 0x07, 0x32, 0xED, 0xAE, 0xAC, 0xFB, 0xC9, 0x42, 0x67, 0x32, 0x0D, 0x8B, 0x02,
    0x02, 0x2B, 0x4B, 0x47, 0x32, 0xBF, 0xA5, 0xBF, 0x3B, 0x0B, 0x4B, 0xC6, 0x21, 0x6B, 0xEF, 0xBF,
    0xA8, 0xEB, 0x4A, 0xA5, 0x21, 0xD2, 0xBE, 0xF6, 0xB8, 0x0B, 0x53, 0xE7, 0x31, 0x09, 0x6B, 0xE9,
    0xAF, 0xEB, 0x52, 0x86, 0x29, 0x8C, 0xCB, 0x6F, 0xD6, 0x0C, 0x63, 0x25, 0x21, 0x89, 0xFD, 0xDF,
    0xFF, 0x8B, 0x52, 0x05, 0x21, 0xF0, 0x88, 0x8C, 0xA6, 0xAC, 0x5A, 0xE5, 0x20, 0xF5, 0x5A, 0x50,
    0x70, 0x8B, 0x5A, 0x05, 0x29, 0xDB, 0x7B, 0x7F, 0x3F, 0xAC, 0x62, 0x83, 0x18, 0xAE, 0x8A, 0xED,
    0x7F, 0xED, 0x62, 0x63, 0x18, 0xC9, 0xAE, 0xB0, 0xA2, 0xED, 0x62, 0x26, 0x29, 0x6A, 0xBA, 0x3B,
    0xFD, 0xCC, 0x5A, 0x26, 0x29, 0x9B, 0xE7, 0xEC, 0xAE, 0xED, 0x62, 0x06, 0x29, 0xBE, 0xA2, 0xC1,
    0xCD, 0xED, 0x62, 0x05, 0x21, 0x6D, 0xAE, 0xAE, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0xC6, 0xA9, 0x5A, 0x7E, 0x57, 0x08,
    0x00, 0x2F, 0x84, 0x24, 0x21, 0xFA, 0x7E, 0xD4, 0x1C, 0xD3, 0x8C, 0x04, 0x09, 0x57, 0x55, 0x7F,
    0x78, 0x29, 0x2A, 0xC3, 0x00, 0x3F, 0xAD, 0xF5, 0x77, 0x29, 0x22, 0x05, 0x01, 0xA0, 0x35, 0x17,
    0x3F, 0xCC, 0x42, 0x09, 0x22, 0xB7, 0x2E, 0xDB, 0xDF, 0x4C, 0x4B, 0xA6, 0x19, 0xFE, 0x67, 0x8A,
    0xC0, 0xAD, 0x5B, 0xE6, 0x21, 0xF3, 0xF9, 0xFF, 0xFF, 0xC9, 0x42, 0x47, 0x32, 0xEA, 0xEA, 0x8B,
    0xEF, 0x89, 0x3A, 0xA5, 0x19, 0x2A, 0xAA, 0x0A, 0x9F, 0x0B, 0x4B, 0x28, 0x32, 0xFE, 0xE5, 0x0A,
    0xA8, 0xEB, 0x4A, 0x27, 0x32, 0x3B, 0xF9, 0x73, 0x03, 0xEB, 0x52, 0xA6, 0x29, 0xFA, 0xCB, 0x09,
    0xB7, 0xCB, 0x52, 0x86, 0x29, 0xBA, 0xBA, 0x5E, 0xE8, 0x08, 0x42, 0x04, 0x21, 0x88, 0x8C, 0xB6,
    0x3C, 0xCC, 0x5A, 0xE4, 0x20, 0xBF, 0x09, 0x0D, 0xFF, 0xEC, 0x5A, 0x87, 0x31, 0x7E, 0x56, 0xFE,
    0x02, 0xCC, 0x62, 0xE5, 0x20, 0x9B, 0x7F, 0xCF, 0x9C, 0xCC, 0x62, 0xC5, 0x20, 0xEA, 0x3F, 0x96,
    0x74, 0xAC, 0x62, 0xA4, 0x18, 0x8D, 0xAE, 0xA8, 0xAF, 0xAC, 0x5A, 0xE5, 0x20, 0x77, 0xE6, 0xAE,
    0x2B, 0xAC, 0x5A, 0x26, 0x29, 0x27, 0xD7, 0x57, 0x2B, 0xAC, 0x5A, 0x26, 0x29, 0x8E, 0xF8, 0xDB,
    0xA9, 0x4F, 0x73, 0x06, 0x29, 0xA0, 0xAE, 0xD7, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xC6, 0xEE, 0x7B, 0x02, 0x8B, 0x6D,
    0x6D, 0x54, 0xAD, 0x44, 0x21, 0x1C, 0x9E, 0x57, 0x55, 0xB6, 0xAD, 0xE4, 0x10, 0x58, 0x5E, 0x5F,
    0x55, 0xA7, 0x19, 0x82, 0x00, 0xF6, 0xBE, 0x15, 0x3D, 0x0D, 0x43, 0x45, 0x09, 0x37, 0x96, 0xF8,
    0xA8, 0x2D, 0x4B, 0xC7, 0x21, 0x8F, 0xA2, 0xA3, 0xA5, 0x4C, 0x4B, 0x69, 0x32, 0x57, 0x82, 0x00,
    0xAA, 0x2B, 0x4B, 0x48, 0x32, 0x1F, 0x9A, 0xF8, 0xDA, 0x2B, 0x4B, 0xC6, 0x21, 0xAE, 0x40, 0x42,
    0xAA, 0x54, 0x95, 0xA6, 0x21, 0xD5, 0x8D, 0x8D, 0xFD, 0xCA, 0x4A, 0xC6, 0x21, 0xC0, 0xCD, 0xCD,
    0x82, 0x55, 0x9D, 0xE7, 0x29, 0x6D, 0x4D, 0xCD, 0x7D, 0x2C, 0x5B, 0x65, 0x21, 0x3F, 0x35, 0x37,
    0xBA, 0x8A, 0x4A, 0x45, 0x21, 0x88, 0x86, 0x8E, 0xE0, 0xAB, 0x52, 0x25, 0x29, 0xDC, 0xDC, 0xFE,
    0xAE, 0xAC, 0x5A, 0xE4, 0x18, 0xE3, 0x8D, 0x5D, 0x5F, 0x2E, 0x6B, 0x66, 0x29, 0xCF, 0x7E, 0x5E,
    0xDD, 0xF1, 0x83, 0xC4, 0x20, 0x7A, 0xC2, 0x89, 0x8F, 0xCC, 0x62, 0x05, 0x29, 0xEE, 0x07, 0xF6,
    0x7E, 0x4A, 0x52, 0x47, 0x31, 0x75, 0xA4, 0x02, 0x0B, 0x2A, 0x4A, 0x05, 0x21, 0x38, 0x2F, 0x85,
    0x8F, 0xAC, 0x5A, 0x47, 0x31, 0xAC, 0xFB, 0xB9, 0xA9, 0xAC, 0x5A, 0x67, 0x31, 0xC6, 0x75, 0xD3,
    0x93, 0xCC, 0x5A, 0x67, 0x31, 0xAB, 0x3D, 0x3B, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF, 0x7B, 0x41, 0x08, 0x00, 0x55, 0x55,
    0x55, 0x44, 0x21, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x45, 0x21, 0x00, 0x00, 0x00, 0x55, 0x55,
    0x55, 0xC8, 0x21, 0x00, 0x00, 0x02, 0x55, 0x55, 0x55, 0x08, 0x2A, 0x20, 0x00, 0x00, 0x55, 0x55,
    0x55, 0xCB, 0x42, 0x20, 0x00, 0x0A, 0x55, 0x55, 0x55, 0xAA, 0x42, 0x20, 0x00, 0x00, 0x55, 0x55,
    0x55, 0xAA, 0x42, 0x20, 0x00, 0x00, 0x55, 0x55, 0x55, 0xA9, 0x42, 0x20, 0x00, 0x08, 0x55, 0x55,
    0x55, 0x89, 0x3A, 0x20, 0x00, 0x00, 0x55, 0x55, 0x55, 0xAA, 0x4A, 0x20, 0x00, 0x00, 0x55, 0x55,
    0x55, 0x8A, 0x42, 0x20, 0x00, 0x80, 0x55, 0x55, 0x55, 0x69, 0x42, 0x20, 0x00, 0x00, 0x55, 0x55,
    0x55, 0x28, 0x3A, 0x20, 0x00, 0x00, 0x55, 0x55, 0x55, 0xE8, 0x39, 0x20, 0x00, 0x00, 0x55, 0x55,
    0x55, 0x29, 0x42, 0x20, 0x00, 0x0A, 0x55, 0x55, 0x55, 0x29, 0x4A, 0x20, 0x00, 0x02, 0x55, 0x55,
    0x55, 0x4A, 0x52, 0x20, 0x00, 0x80, 0x55, 0x55, 0x55, 0xE9, 0x41, 0x00, 0x00, 0x00, 0x55, 0x55,
    0x55, 0xE9, 0x49, 0x20, 0x00, 0x00, 0x55, 0x55, 0x55, 0xE9, 0x41, 0x00, 0x00, 0x00, 0x55, 0x55,
    0x55, 0xC8, 0x39, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x09, 0x42, 0x20, 0x00, 0x20, 0x55, 0x55,
    0x55, 0x0A, 0x4A, 0x20, 0x00, 0x00, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xC3, 0x00, 0x00, 0x00, 0x00, 0xC0,
    0x01, 0x81, 0x99, 0xCC, 0x43, 0x8D, 0xB5, 0x0B, 0x44, 0x7A, 0x3F, 0x33, 0xBF, 0xCD, 0x80, 0xD5,
    0x43, 0x33, 0x3D, 0x05, 0x44, 0x88, 0x1C, 0x2F, 0xBE, 0x33, 0xB7, 0xE1, 0x43, 0x93, 0x5A, 0x06,
    0x44, 0xC0, 0xB0, 0xD6, 0xBE, 0xD7, 0xED, 0x14, 0x44, 0x5D, 0xD5, 0x06, 0x44, 0xBC, 0xC5, 0x10,
    0xBF, 0xD7, 0xED, 0x14, 0x44, 0x6C, 0xE7, 0x09, 0x44, 0xD6, 0x10, 0x3F, 0xBF, 0xE0, 0xF3, 0xCC,
    0x43, 0x15, 0x6D, 0x05, 0x44, 0xD3, 0xB6, 0x32, 0x40, 0xAF, 0xD0, 0xDB, 0x43, 0xD7, 0xED, 0x14,
    0x44, 0x82, 0xD8, 0x22, 0xBF, 0x46, 0xFA, 0xEA, 0x43, 0xD7, 0xED, 0x14, 0x44, 0x72, 0x35, 0x29,
    0xBF, 0x28, 0x4D, 0xD2, 0x43, 0xD7, 0xED, 0x14, 0x44, 0xD0, 0xF8, 0x21, 0xBF, 0x81, 0xB4, 0xD4,
    0x43, 0xD7, 0xED, 0x14, 0x44, 0x64, 0xFE, 0x28, 0xBF, 0xD7, 0xED, 0x14, 0x44, 0xAF, 0x0C, 0x0A,
    0x44, 0xC8, 0x42, 0x41, 0xBF, 0x1E, 0x26, 0xD6, 0x43, 0xD7, 0xED, 0x14, 0x44, 0x76, 0x2B, 0x13,
    0xBF, 0xD7, 0xED, 0x14, 0x44, 0x00, 0x6B, 0x10, 0x44, 0x7E, 0xBB, 0x37, 0xBF, 0xD7, 0xED, 0x14,
    0x44, 0xD7, 0xED, 0x14, 0x44, 0x9C, 0xFB, 0x30, 0xBF, 0xF9, 0xF0, 0xD0, 0x43, 0xD7, 0xED, 0x14,
    0x44, 0xA2, 0xAB, 0x27, 0xBF, 0xFA, 0x14, 0xCC, 0x43, 0xD7, 0xED, 0x14, 0x44, 0x58, 0x97, 0x28,
    0xBF, 0x05, 0xAB, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x01, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00,
    0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05,
    0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x0A, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x06, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x07,
    0x00, 0x00, 0x00, 0x0A, 0x00, 0x07, 0x00, 0x0A, 0x00, 0x0C, 0x00, 0x07, 0x00, 0x0C, 0x00, 0x0D,
    0x00, 0x0E, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09,
    0x00, 0x0A, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x06, 0x00, 0x09, 0x00, 0x00,
    0x00, 0x0B, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x07, 0x00, 0x0A, 0x00, 0x0C, 0x00, 0x07,
    0x00, 0x0C, 0x00, 0x0D, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0E,
    0x00, 0x06, 0x83, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x30, 0xAE, 0xE9, 0x37, 0x20, 0x9E, 0x90,
    0x3E, 0x98, 0xF5, 0x88, 0x3D, 0x00, 0x00, 0xF8, 0x3E, 0x1F, 0xE9, 0x26, 0x3E, 0x09, 0x3D, 0xE9,
    0x3E, 0x44, 0x66, 0x3A, 0x3F, 0x1A, 0xBB, 0xF1, 0x3E, 0x9D, 0xBF, 0x3A, 0x3F, 0x3D, 0x9B, 0xC1,
    0x3E, 0x00, 0x00, 0xB0, 0xAF, 0x53, 0x2C, 0xF3, 0x3E, 0x02, 0x71, 0xFC, 0x3D, 0xD8, 0x79, 0xDF,
    0x3B, 0x70, 0xCC, 0x77, 0x3E, 0xAB, 0x6A, 0x5B, 0x3C, 0x9E, 0xBD, 0x47, 0x3D, 0x83, 0xB4, 0x30,
    0x3B, 0x7C, 0x6A, 0x8A, 0x3D, 0x4A, 0xF7, 0x74, 0x3B, 0xCD, 0xC3, 0x3A, 0x3F, 0x34, 0x53, 0xBF,
    0x3E, 0x56, 0x91, 0xA1, 0x3D, 0x1B, 0x00, 0x8F, 0x3B, 0xE4, 0x7C, 0x3B, 0x3F, 0xD3, 0x06, 0x37,
    0x3E, 0x00, 0x00, 0x3C, 0x3F, 0x67, 0x7D, 0x26, 0x3D, 0xDE, 0x1D, 0x1C, 0x3D, 0x2D, 0x0E, 0x0A,
    0x3B, 0xA8, 0x0A, 0x85, 0x38, 0x00, 0x00, 0x40, 0x2F, 0x01, 0x43, 0x00, 0x00, 0x00, 0x08, 0x01,
    0x07, 0x3C, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x05, 0x01, 0x05, 0x02,
    0x00, 0x05, 0x00, 0x2A, 0x02, 0x05, 0x02, 0x00, 0x05, 0x00, 0x2A, 0x03, 0x05, 0x02, 0x00, 0x05,
    0x2A, 0x00, 0x04, 0x05, 0x02, 0x00, 0x05, 0x2A, 0x00, 0x05, 0x05, 0x02, 0x00, 0x05, 0x2A, 0x00,
    0x01, 0x00, 0x06, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x01, 0x04, 0x05, 0x00, 0x00, 0x00,
    0x03, 0x01, 0x14, 0x00, 0x00, 0x00, 0x09, 0x01, 0x08, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x80, 0x01, 0x40, 0x00, 0x06, 0x03, 0x00, 0x00, 0x80, 0x20, 0x01, 0x23, 0x00, 0x00, 0x00, 0x0A,
    0x01, 0x09, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x08,
    0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x04, 0x06, 0x01, 0x00, 0x00,
    0x00, 0x04, 0x01, 0x7A, 0x00, 0x00, 0x00, 0x0B, 0x08, 0x0A, 0x11, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6E, 0x63, 0x65, 0x5F, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x0B,
    0x05, 0x00, 0x00, 0x00, 0x00, 0x03, 0x73, 0x72, 0x73, 0x0C, 0x11, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x45, 0x50, 0x53, 0x47, 0x3A, 0x33, 0x32, 0x36, 0x33, 0x31, 0x2B, 0x35, 0x37, 0x37, 0x33, 0x0D,
    0x05, 0x00, 0x00, 0x00, 0x00, 0x03, 0x6D, 0x70, 0x70, 0x0E, 0x05, 0x00, 0x00, 0x00, 0x00, 0x03,
    0x32, 0x2E, 0x30, 0x0F, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x09, 0x6D, 0x69, 0x6E, 0x5F, 0x6C, 0x65,
    0x76, 0x65, 0x6C, 0x10, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x33, 0x11, 0x11, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x75, 0x6E, 0x69, 0x74, 0x73, 0x5F, 0x70, 0x65, 0x72, 0x5F, 0x70, 0x69, 0x78, 0x65,
    0x6C,
  ]);

  it("should read header of deep tile", () => {
    const stream = new A3xTileIO.StreamReader(marsielles_10_768_129);
    const header = new A3xTileIO.Header(stream);
    expect(header.isValid).to.be.true;

    expect(header.format).to.equal(TileFormat.A3x);
    expect(header.version).to.equal(7);
    expect(header.byteOrder).to.equal(A3xTileIO.ByteOrder.LittleEndian);
    expect(header.options.length).to.equal(0);
    expect(header.upAxis).to.equal(A3xTileIO.UpAxis.Z);
    expect(header.chunks.length).to.equal(8);

    expect(header.contributors.length).to.equal(22);
    expect(header.contributors.join()).to.equal("Agency9 COLLADA to A3X,Agency9 Batch,Agency9 Transform,Agency9 Transform,Agency9 Batch,Agency9 QuadrantRemove,Agency9 ScenegraphRemove,Agency9 NormalsRemove,Agency9 Batch,Agency9 Clip,Agency9 Batch,Agency9 TextureUnpacker,Agency9 DataTypeConverter,Agency9 Batch,Agency9 TexturePacker,Agency9 Batch,Agency9 TextureConverter,Agency9 MaterialSet,Agency9 ScenegraphRemove,Agency9 Batch,Agency9 Quadrant,Agency9 SkirtsAdd");

    expect(stream.curPos).to.equal(marsielles_10_768_129.length);

    const expectedModelChunkLengths = [ 11, 12, 4618, 67, 20, 35, 122 ];
    expectChunkHeader(header.chunks[0], A3xTileIO.ChunkType.Model, 248);
    for (let i = 1; i < 8; i++)
      expectChunkHeader(header.chunks[i], A3xTileIO.ChunkType.ContentList, expectedModelChunkLengths[i - 1]);
  });

  it("should read contents of deep tile", () => {
    const reader = A3xTileIO.Reader.create(marsielles_10_768_129)!;
    expect(reader).not.to.be.undefined;
    expect(reader.header.isValid).to.be.true;

    // Textures
    expect(reader.textures.size).to.equal(1);
    const tx = reader.textures.get(8)!;
    expect(tx).not.to.be.undefined;
    expect(tx.width).to.equal(128);
    expect(tx.height).to.equal(64);
    expect(tx.alphaInfo).to.equal(0); // ###TODO meaning? supposed to be bitmask [ opaque, translucent, transparent ]...
    expect(tx.type).to.equal(A3xTileIO.TextureType.Dxt1);
    // ###TODO buffer range

    // Buffers
    expect(reader.buffers.size).to.equal(4);
    // ID, length
    const expectedBuffers = [ [3, 4096], [4, 192], [5, 168], [6, 128] ];
    expect(reader.buffers.size).to.equal(expectedBuffers.length);
    for (const expectedBuffer of expectedBuffers) {
      const buf = reader.buffers.get(expectedBuffer[0])!;
      expect(buf).not.to.be.undefined;
      expect(buf.byteLength).to.equal(expectedBuffer[1]);
    }

    // Strings - IDs range from 10..17
    const expectedStrings = [ "reference_point", "srs", "EPSG:32631+5773", "mpp", "2.0", "min_level", "3", "units_per_pixel" ];
    expect(reader.strings.size).to.equal(expectedStrings.length);
    for (let i = 10; i < 18; i++) {
      const str = reader.strings.get(i)!;
      expect(str).not.to.be.undefined;
      expect(str).to.equal(expectedStrings[i - 10]);
    }

    // Material
    expect(reader.materials.size).to.equal(1);
    const mat = reader.materials.get(9)!;
    expect(mat).not.to.be.undefined;
    expect(mat.diffuse!).not.to.be.undefined;
    expect(mat.diffuse!.setId).to.equal(0);
    expect(mat.diffuse!.textureId).to.equal(8);
    expect(mat.diffuse!.wrapS).to.equal(A3xTileIO.WrapMode.ClampToBorder);
    expect(mat.diffuse!.wrapT).to.equal(A3xTileIO.WrapMode.ClampToBorder);

    // Instance
    expect(reader.instances.size).to.equal(1);
    const inst = reader.instances.get(1)!;
    expect(inst).not.to.be.undefined;
    expect(inst.materialId).to.equal(9);
    expect(inst.meshIds.length).to.equal(1);
    expect(inst.meshIds[0]).to.equal(7);

    // Model
    expect(reader.model.sceneGraph.length).to.equal(1);
    expect(reader.model.sceneGraph[0]).to.equal(2);

    expect(reader.model.instances.length).to.equal(1);
    const instance = reader.model.instances[0] as A3xTileIO.BatchInstanceGroup;
    expect(instance.type).to.equal(A3xTileIO.InstanceGroupType.Batch);
    expect(instance.instanceIds.length).to.equal(1);
    expect(instance.instanceIds[0]).to.equal(1);

    expect(Math.floor(instance.transform.origin.x)).to.equal(689850);
    expect(Math.floor(instance.transform.origin.y)).to.equal(4793961);
    expect(Math.floor(instance.transform.origin.z)).to.equal(0.0);
    expect(instance.transform.matrix.isIdentity).to.be.true;
    expect(Math.floor(instance.aabb.low.x)).to.equal(690258);
    expect(Math.floor(instance.aabb.low.y)).to.equal(4794494);
    expect(Math.floor(instance.aabb.high.x)).to.equal(690446);
    expect(Math.floor(instance.aabb.high.y)).to.equal(4794557);

    const expectedAttributes = [
      [ "reference_point", [691894.27297861, 4795869.88494765, 0.0] ],
      [ "srs", "EPSG:32631+5773" ],
      [ "mpp", "2.0" ],
      [ "min_level", "3" ],
      [ "units_per_pixel", 0.0625 ],
    ];
    expect(reader.model.attributes.length).to.equal(expectedAttributes.length);
    for (let i = 0; i < expectedAttributes.length; i++) {
      const attr = reader.model.attributes[i];
      const exp = expectedAttributes[i];
      const key = reader.strings.get(attr.keyId)!;
      expect(key).not.to.be.undefined;
      expect(key).to.equal(exp[0]);

      if ("number" === typeof exp[1]) {
        expect((attr.value as A3xTileIO.NumericAttributeValue).value).to.equal(exp[1]);
      } else if ("string" === typeof exp[1]) {
        const strId = (attr.value as A3xTileIO.StringAttributeValue).value;
        const str = reader.strings.get(strId)!;
        expect(str).not.to.be.undefined;
        expect(str).to.equal(exp[1]);
      } else {
        for (let j = 0; j < 3; j++) {
          const entry = (attr.value as A3xTileIO.ArrayAttributeValue).value[j];
          const value = (entry as any).value as number;
          expect(value).to.equal((exp[1] as number[])[j]);
        }
      }
    }

    // Nodes
    expect(reader.nodes.size).to.equal(1);
    const node = reader.nodes.get(2)!;
    expect(node).not.to.be.undefined;
    expect(node.transform).to.be.undefined;
    expect(node.aabb).to.be.undefined;
    expect(node.childNodeIds.length).to.equal(0);
    expect(node.attributeKey).to.equal(0);
    expect(node.attributeName).to.equal("");
    expect(node.attributes.length).to.equal(0);

    // Meshes
    expect(reader.meshes.size).to.equal(1);
    const mesh = reader.meshes.get(7)!;
    expect(mesh).not.to.be.undefined;

    expect(mesh.colorBuffers.length).to.equal(0);

    expect(mesh.otherBuffers.length).to.equal(1);
    const otherBuffer = mesh.otherBuffers[0];
    expect(otherBuffer.numCoordinates).to.equal(3);
    expect(otherBuffer.stride).to.equal(0);
    expect(otherBuffer.setIdOrMeshType).to.equal(A3xTileIO.MeshDataType.Position);
    expect(otherBuffer.offset).to.equal(0);
    expect(otherBuffer.buffer.bufferId).to.equal(4);
    expect(otherBuffer.buffer.dataType).to.equal(A3xTileIO.BufferDataType.Float);
    expect(otherBuffer.buffer.offset).to.equal(0);

    expect(mesh.textureCoordinateBuffers.length).to.equal(1);
    const tc = mesh.textureCoordinateBuffers[0];
    expect(tc.numCoordinates).to.equal(2);
    expect(tc.offset).to.equal(0);
    expect(tc.setIdOrMeshType).to.equal(0);
    expect(tc.stride).to.equal(0);
    expect(tc.buffer.bufferId).to.equal(6);
    expect(tc.buffer.dataType).to.equal(A3xTileIO.BufferDataType.Float);
    expect(tc.buffer.offset).to.equal(0);

    const expIdxBuf: A3xTileIO.IndexBuffer[] = [
      { type: A3xTileIO.IndexBufferType.Default, primitiveType: A3xTileIO.PrimitiveType.Triangle, offset: 0, count: 42,
        buffer: { bufferId: 5, dataType: A3xTileIO.BufferDataType.Short, offset: 0 },
      },
      { type: A3xTileIO.IndexBufferType.Quadrant0, primitiveType: A3xTileIO.PrimitiveType.Triangle, offset: 0, count: 42,
        buffer: { bufferId: 5, offset: 0, dataType: A3xTileIO.BufferDataType.Short },
      },
      { type: A3xTileIO.IndexBufferType.Quadrant1, primitiveType: A3xTileIO.PrimitiveType.Triangle, offset: 42, count: 0,
        buffer: { bufferId: 5, offset: 0, dataType: A3xTileIO.BufferDataType.Short },
      },
      { type: A3xTileIO.IndexBufferType.Quadrant2, primitiveType: A3xTileIO.PrimitiveType.Triangle, offset: 42, count: 0,
        buffer: { bufferId: 5, offset: 0, dataType: A3xTileIO.BufferDataType.Short },
      },
      { type: A3xTileIO.IndexBufferType.Quadrant3, primitiveType: A3xTileIO.PrimitiveType.Triangle, offset: 42, count: 0,
        buffer: { bufferId: 5, offset: 0, dataType: A3xTileIO.BufferDataType.Short },
      },
    ];

    expect(mesh.indexBuffers.length).to.equal(expIdxBuf.length);
    for (let i = 0; i < expIdxBuf.length; i++) {
      const exp = expIdxBuf[i];
      const buf = mesh.indexBuffers[i];
      expect(buf.type).to.equal(exp.type);
      expect(buf.primitiveType).to.equal(exp.primitiveType);
      expect(buf.offset).to.equal(exp.offset);
      expect(buf.count).to.equal(exp.count);
      expect(buf.buffer.bufferId).to.equal(exp.buffer.bufferId);
      expect(buf.buffer.offset).to.equal(exp.buffer.offset);
      expect(buf.buffer.dataType).to.equal(exp.buffer.dataType);
    }
  });

  const layerSettingsJSON: A3xTile.LayerSettingsProps = {
    type: "terrain",
    version: 7,
    maxLevel: 15,
    // cullFace: "back",
    innerBounds: {
      center: [
        691925.65625,
        4795876.75,
        0,
      ],
      halfLengths: [
        1700.84375,
        1611.25,
        0,
      ],
    },
    textureType: "dxt1",
    lodWindowSize: {
      x: 512,
      y: 512,
    },
    // classNames: ["ts_bentley--internal--marseille--3dmesh_190404"],
    outerBounds: {
      center: [
        384247.86089600006,
        5249684.8725815,
        0,
      ],
      halfLengths: [
        610013.464242,
        610013.4642420001,
        0,
      ],
    },
  };

  function expectRange(json: A3xTile.BoundsProps, range: Range3d): void {
    const center = Point3d.fromJSON(json.center);
    const length = Point3d.fromJSON(json.halfLengths);
    expect(range.low.x).to.equal(center.x - length.x);
    expect(range.low.y).to.equal(center.y - length.y);
    expect(range.low.z).to.equal(center.z - length.z);
    expect(range.high.x).to.equal(center.x + length.x);
    expect(range.high.y).to.equal(center.y + length.y);
    expect(range.high.z).to.equal(center.z + length.z);
  }

  it("should read layer settings from JSON", () => {
    const json = layerSettingsJSON;
    const settings = A3xTile.LayerSettings.fromJSON(json)!;
    expect(settings).not.to.be.undefined;
    expect(settings.maxLevel).to.equal(15);
    expect(settings.maximumSize).to.equal(512);

    expectRange(json.innerBounds, settings.innerBounds);
    expectRange(json.outerBounds, settings.outerBounds);
  });

  it("should produce and parse content Ids", () => {
    const loader = new A3xTile.Loader("http://stuff.com/tiles/", 15, 512);
    expect(loader.formatContentId(2, 1, 0)).to.equal("2/1/2_1_0.a3x");
    expect(loader.formatContentId(123, 456, 789)).to.equal("123/456/123_456_789.a3x");

    const expectContentId = (id: string, d: number, x: number, y: number): void => {
      const parts = loader.parseContentId(id)!;
      expect(parts).not.to.be.undefined;
      expect(parts.d).to.equal(d);
      expect(parts.x).to.equal(x);
      expect(parts.y).to.equal(y);
    };

    expectContentId("2/1/2_1_0.a3x", 2, 1, 0);
    expectContentId("123/456/123_456_789.a3x", 123, 456, 789);
  });

  function expectChildTiles(loader: A3xTile.Loader, expected: TileProps[], parentRange: Range3d, parentContentId: string, parentContentRange?: Range3d): void {
    const kids = loader.createChildrenProps(parentRange, parentContentId, parentContentRange);
    expect(kids.length).to.equal(expected.length);
    for (let i = 0; i < kids.length; i++) {
      const exp = expected[i];
      const kid = kids[i];
      const expRange = Range3d.fromJSON(exp.range);
      const kidRange = Range3d.fromJSON(kid.range);

      expect(kid.contentId).to.equal(exp.contentId);
      expect(kidRange.low.x).to.equal(expRange.low.x);
      expect(kidRange.low.y).to.equal(expRange.low.y);
      expect(kidRange.low.z).to.equal(expRange.low.z);
      expect(kidRange.high.x).to.equal(expRange.high.x);
      expect(kidRange.high.y).to.equal(expRange.high.y);
      expect(kidRange.high.z).to.equal(expRange.high.z);
    }
  }

  function makeChild(contentId: string, lx: number, ly: number, hx: number, hy: number): TileProps {
    return {
      contentId,
      range: new Range3d(lx, ly, 0, hx, hy, 5),
      maximumSize: 512,
    };
  }

  it("should create children of root tile", () => {
    const loader = new A3xTile.Loader("http://stuff.cim/tiles/", 15, 512);
    const rootRange = new Range3d(0, 0, 0, 100, 200, 5);
    const rootContentId = "0/0/0_0_0.a3x";

    expectChildTiles(loader, [
      makeChild("1/0/1_0_0.a3x", 0, 0, 50, 100),
      makeChild("1/0/1_0_1.a3x", 0, 100, 50, 200),
      makeChild("1/1/1_1_0.a3x", 50, 0, 100, 100),
      makeChild("1/1/1_1_1.a3x", 50, 100, 100, 200),
    ], rootRange, rootContentId);

    // Use full range as content range
    expectChildTiles(loader, [
      makeChild("1/0/1_0_0.a3x", 0, 0, 50, 100),
      makeChild("1/0/1_0_1.a3x", 0, 100, 50, 200),
      makeChild("1/1/1_1_0.a3x", 50, 0, 100, 100),
      makeChild("1/1/1_1_1.a3x", 50, 100, 100, 200),
    ], rootRange, rootContentId, rootRange);

    // Make a content range that only intersects the left-most 2 tiles.
    const fakeRootContentRange = new Range3d(5, 5, 2, 20, 120, 3);
    expectChildTiles(loader, [
      makeChild("1/0/1_0_0.a3x", 0, 0, 50, 100),
      makeChild("1/0/1_0_1.a3x", 0, 100, 50, 200),
    ], rootRange, rootContentId, fakeRootContentRange);
  });

  it("should create children of level 1 tile", () => {
    const loader = new A3xTile.Loader("blah/", 15, 512);
    const rootRange = new Range3d(50, 0, 0, 100, 100, 5);
    const rootContentId = "1/1/1_1_0.a3x";

    expectChildTiles(loader, [
      makeChild("2/2/2_2_0.a3x", 50, 0, 75, 50),
      makeChild("2/2/2_2_1.a3x", 50, 50, 75, 100),
      makeChild("2/3/2_3_0.a3x", 75, 0, 100, 50),
      makeChild("2/3/2_3_1.a3x", 75, 50, 100, 100),
    ], rootRange, rootContentId);

    const fakeRootContentRange = new Range3d(55, 5, 2, 70, 80, 3);
    expectChildTiles(loader, [
      makeChild("2/2/2_2_0.a3x", 50, 0, 75, 50),
      makeChild("2/2/2_2_1.a3x", 50, 50, 75, 100),
    ], rootRange, rootContentId, fakeRootContentRange);
  });

  it("should create children of level 2 tile", () => {
    const loader = new A3xTile.Loader("blah/", 15, 512);
    const rootRange = new Range3d(50, 50, 0, 75, 100, 5);
    const rootContentId = "2/2/2_2_1.a3x";

    expectChildTiles(loader, [
      makeChild("3/4/3_4_2.a3x", 50, 50, 62.5, 75),
      makeChild("3/4/3_4_3.a3x", 50, 75, 62.5, 100),
      makeChild("3/5/3_5_2.a3x", 62.5, 50, 75, 75),
      makeChild("3/5/3_5_3.a3x", 62.5, 75, 75, 100),
    ], rootRange, rootContentId);

    // Clip out all but the bottom-right child.
    const fakeRootContentRange = new Range3d(65, 65, 2, 70, 70, 3);
    expectChildTiles(loader, [makeChild("3/5/3_5_2.a3x", 62.5, 50, 75, 75)], rootRange, rootContentId, fakeRootContentRange);
  });
});
