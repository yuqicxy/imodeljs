/*---------------------------------------------------------------------------------------------
* Copyright (c) Bentley Systems, Incorporated. All rights reserved.
* See LICENSE.md in the project root for license terms and full copyright notice.
*--------------------------------------------------------------------------------------------*/
/** @packageDocumentation
 * @module Tile
 */

import {
  BatchType,
  ContentIdProvider,
  computeChildTileProps,
  TileProps,
  ViewFlag,
} from "@bentley/imodeljs-common";
import {
  Tile,
} from "./Tile";
import { TileLoader } from "./TileTree";
import {
  TileRequest,
} from "./TileRequest";
import {
  IModelApp,
} from "../IModelApp";
import {
  IModelConnection,
} from "../IModelConnection";

/** Deserializes tiles in iMdl format - Bentley's internal format for representing 3d tiles
 * generated by the backend from the contents of geometric models. iMdl shares some similarities with glTF, but a quite
 * different representation of geometry and materials.
 * @internal
 */
export class IModelTileLoader extends TileLoader {
  private _iModel: IModelConnection;
  private _type: BatchType;
  private _edgesRequired: boolean;
  private readonly _guid: string | undefined;
  private readonly _contentIdProvider: ContentIdProvider;
  protected get _batchType() { return this._type; }
  protected get _loadEdges(): boolean { return this._edgesRequired; }

  public constructor(iModel: IModelConnection, formatVersion: number | undefined, batchType: BatchType, edgesRequired: boolean, allowInstancing: boolean, guid: string | undefined) {
    super();
    this._iModel = iModel;
    this._type = batchType;
    this._edgesRequired = edgesRequired;
    this._contentIdProvider = ContentIdProvider.create(allowInstancing, IModelApp.tileAdmin, formatVersion);
    this._guid = guid;
  }

  public get maxDepth(): number { return 32; }  // Can be removed when element tile selector is working.
  public get priority(): Tile.LoadPriority { return (BatchType.VolumeClassifier === this._batchType || BatchType.PlanarClassifier === this._batchType) ? Tile.LoadPriority.Classifier : Tile.LoadPriority.Primary; }
  public tileRequiresLoading(params: Tile.Params): boolean { return 0 !== params.maximumSize; }
  public get rootContentId(): string { return this._contentIdProvider.rootContentId; }

  protected static _viewFlagOverrides = new ViewFlag.Overrides();
  public get viewFlagOverrides() { return IModelTileLoader._viewFlagOverrides; }

  public async getChildrenProps(parent: Tile): Promise<TileProps[]> {
    const kids = computeChildTileProps(parent, this._contentIdProvider, parent.root);
    IModelApp.tileAdmin.onTilesElided(kids.numEmpty);
    return kids.children;
  }

  public async requestTileContent(tile: Tile, isCanceled: () => boolean): Promise<TileRequest.Response> {
    const handleCacheMiss = () => {
      const cancelMe = isCanceled();
      if (!cancelMe)
        IModelApp.tileAdmin.onCacheMiss();

      return cancelMe;
    };

    return this._iModel.tiles.getTileContent(tile.root.id, tile.contentId, handleCacheMiss, this._guid);
  }

  public adjustContentIdSizeMultiplier(contentId: string, sizeMultiplier: number): string {
    return this._contentIdProvider.idFromParentAndMultiplier(contentId, sizeMultiplier);
  }

  public onActiveRequestCanceled(tile: Tile): void {
    IModelApp.tileAdmin.onActiveRequestCanceled(tile);
  }
}
